used when different commands (=> interface for commands) can be used to execute the same business logic (of the receiver) (Right click + copy or Ctrl + C both do the same thing)

class Invoker {
    // some code

    void execute(String action) {
        if ("ActionOne".equals(action)) {
            receiver.actionOne();
        } else if ("ActionTwo".equals(action)) {
            receiver.actionTwo();
        } else {
            System.out.println("Unknown action");
        }
    }
}

// Problems with above code
// 1. Invoker and Receiver are tightly-coupled => harder to change or add new actions/commands
// 2. Adding new actions/commands would require modifying the Invoker class, violating the Open/Closed Principle

Solution: introduce a command abstraction layer for decoupling Invoker and Receiver

So now receiver will not directly receive the request but will receive the command
Client uses Invoker to generate a Command which controls a Receiver


Entities Involved - 
- 1 interface for Commands
- Invoker has Command
- Command has Receiver

Example Problems
1) Undo/ Redo functionality ( https://github.com/AshuOPragmatikosThrylos/LLD-Problems/tree/main/15.%20Undo%20Redo%20functionality/code/using%20Command%20DP )
2) Client using Remote to issue a Command to the TV